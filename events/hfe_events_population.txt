namespace = hfe_population
# fix robot pop by on_planet_transfer
planet_event = {
	id = hfe_population.0
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		hfe_trigger_population_enabled = yes
		exists = owner
	}
	immediate = {
		every_owned_pop = {
			pop_event = {
				id = hfe_population.1
			}
		}
	}
}

# fix robot pop by on_pop_abducted
pop_event = {
	id = hfe_population.1
	hide_window = yes
	is_triggered_only = yes
	is_test_event = yes
	trigger = {
		always = no
		hfe_trigger_population_enabled = yes
		exists = owner
		is_robotic = yes
	}
	immediate = {
		# hfe_effect_population_fix_robot_pop = yes
	}
}

# synth accention robot pop fix
country_event = {
	id = hfe_population.2
	hide_window = yes
	is_triggered_only = yes
	is_test_event = yes
	trigger = {
		always = no
		hfe_trigger_population_enabled = yes
		is_mechanical_empire = yes
		not = {
			has_country_flag = hfe_has_event_population.2
		}
	}
	immediate = {
		set_country_flag = hfe_has_event_population.2
		species = {
			save_event_target_as = hfe_robot_species
		}
		every_owned_pop = {
			limit = {
				not = {
					is_same_species = event_target:hfe_robot_species
				}
			}
			pop_event = {
				id = hfe_population.1
			}
		}
	}
}

# fix robot pop by on_pop_assembled
planet_event = {
	id = hfe_population.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		hfe_trigger_population_enabled = yes
		exists = fromfrom
	}
	immediate = {
		fromfrom = {
			# log = "[this.GetName]"
			pop_event = {
				id = hfe_population.1
			}
		}
	}
}

# change main species 50 - 100
country_event = {
	id = hfe_population.50
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		hfe_trigger_population_enabled = yes
		num_pops > 0
		is_country_type = default
		not = {
			any_owned_species = {
				is_exact_same_species = root
			}
		}
	}
	immediate = {
		species = {
			save_event_target_as = hfe_population_old_species
		}
		# should bonus weight by traits like charismatic?
		ordered_owned_species = {
			limit = {
				is_same_species = root
			}
			position = 0
			order_by = value:hfe_script_value_count_owned_pop_exact_same_species
			save_event_target_as = hfe_population_species
		}
		if = {
			limit = {
				not = {
					exists = event_target:hfe_population_species
				}
			}
			ordered_owned_species = {
				position = 0
				order_by = value:hfe_script_value_count_owned_pop_exact_same_species
				save_event_target_as = hfe_population_species
			}
		}
		# flags for texts
		if = {
			limit = {
				event_target:hfe_population_species = {
					is_same_species = root
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_subspecies
				days = 10
			}
		}
		else_if = {
			limit = {
				is_machine_empire = no
				not = {
					has_technology = tech_synthetic_workers
				}
				event_target:hfe_population_species = {
					has_trait = trait_mechanical
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_switch_to_robot_hive
				days = 10
			}
		}
		else_if = {
			limit = {
				is_hive_empire = no
				event_target:hfe_population_species = {
					has_trait = trait_hive_mind
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_switch_to_bio_hive
				days = 10
			}
		}
		else_if = {
			limit = {
				is_gestalt = yes
				hfe_trigger_non_sapient = no
			}
			set_timed_country_flag = {
				flag = hfe_population.50_switch_from_hive
				days = 10
			}
			if = {
				limit = {
					has_valid_civic = civic_machine_servitor
				}
				set_timed_country_flag = {
					flag = hfe_population.50_was_servitor
					days = 10
				}
			}
		}
		else_if = {
			limit = {
				event_target:hfe_population_species = {
					hfe_trigger_is_citizen = {
						country = prev
					}
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_citizenship_full
				days = 10
			}
		}
		else_if = {
			limit = {
				event_target:hfe_population_species = {
					has_citizenship_type = {
						type = citizenship_assimilation
						country = prev
					}
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_citizenship_assimilation
				days = 10
			}
		}
		else_if = {
			limit = {
				event_target:hfe_population_species = {
					has_citizenship_type = {
						type = citizenship_limited
						country = prev
					}
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_citizenship_limited
				days = 10
			}
		}
		else_if = {
			limit = {
				event_target:hfe_population_species = {
					or = {
						has_citizenship_type = {
							type = citizenship_slavery
							country = prev
						}
						has_citizenship_type = {
							type = citizenship_robot_servitude
							country = prev
						}
					}
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_citizenship_slavery
				days = 10
			}
		}
		else_if = {
			limit = {
				event_target:hfe_population_species = {
					has_citizenship_type = {
						type = citizenship_purge
						country = prev
					}
				}
			}
			set_timed_country_flag = {
				flag = hfe_population.50_citizenship_purge
				days = 10
			}
		}
		# change species and other stuff if needed
		change_dominant_species = {
			species = event_target:hfe_population_species
			#change_all = no
		}
		# random ethics civics if purifer
		if = {
			limit = {
				has_valid_civic = civic_fanatic_purifiers
				not = {
					has_country_flag = hfe_population.50_subspecies
				}
			}
			hfe_effect_gov_reset = yes
			set_timed_country_flag = {
				flag = hfe_population.50_was_purifiers
				days = 10
			}
		}
		# hfe_effect_gov_fix_from_hive = yes
		# hfe_effect_gov_fix_to_hive = yes
		if = {
			limit = {
				has_global_flag = hfe_general_logs
			}
			log = "event hfe_population.50 changing main species for [this.GetName]"
		}
		country_event = {
			id = hfe_population.52
		}
		every_relation = {
			country_event = {
				id = hfe_population.52
			}
		}
	}
}

# on_modification_complete
country_event = {
	id = hfe_population.51
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_timed_country_flag = {
			flag = hfe_population_recent_modification
			days = 2
		}
		country_event = {
			id = hfe_population.50
			days = 1
		}
	}
}

country_event = {
	id = hfe_population.52
	title = hfe_population.52.name
	desc = {
		trigger = {
			# non hives
			# subspecies
			success_text = {
				text = hfe_population.52.desc.0.0
				from = {
					has_country_flag = hfe_population.50_subspecies
				}
			}
			success_text = {
				text = hfe_population.52.desc.0.1
				is_country = from
				has_country_flag = hfe_population.50_subspecies
			}
			success_text = {
				text = hfe_population.52.desc.0.2
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_subspecies
				}
			}
			# new species is citizen
			success_text = {
				text = hfe_population.52.desc.1.0.0
				is_country = from
				has_country_flag = hfe_population.50_citizenship_full
				nor = {
					# bio tropy is also citizen
					has_country_flag = hfe_population.50_was_servitor
					has_trait = trait_mechanical
				}
			}
			success_text = {
				text = hfe_population.52.desc.1.0.1
				is_country = from
				has_country_flag = hfe_population.50_citizenship_full
				has_trait = trait_mechanical
			}
			success_text = {
				text = hfe_population.52.desc.1.1.0
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_full
					nor = {
						has_country_flag = hfe_population.50_was_servitor
						has_trait = trait_mechanical
					}
				}
			}
			success_text = {
				text = hfe_population.52.desc.1.1.1
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_full
					has_trait = trait_mechanical
				}
			}
			# new species assimilated
			success_text = {
				text = hfe_population.52.desc.2.0
				is_country = from
				has_country_flag = hfe_population.50_citizenship_assimilation
			}
			success_text = {
				text = hfe_population.52.desc.2.1
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_assimilation
				}
			}
			# new species is non citizen
			success_text = {
				text = hfe_population.52.desc.3.0
				is_country = from
				has_country_flag = hfe_population.50_citizenship_limited
			}
			success_text = {
				text = hfe_population.52.desc.3.1
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_limited
				}
			}
			# new species is slave
			success_text = {
				text = hfe_population.52.desc.4.0.0
				is_country = from
				has_country_flag = hfe_population.50_citizenship_slavery
				not = {
					has_trait = trait_mechanical
				}
			}
			success_text = {
				text = hfe_population.52.desc.4.0.1
				is_country = from
				has_country_flag = hfe_population.50_citizenship_slavery
				has_trait = trait_mechanical
			}
			success_text = {
				text = hfe_population.52.desc.4.1.0
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_slavery
					not = {
						has_trait = trait_mechanical
					}
				}
			}
			success_text = {
				text = hfe_population.52.desc.4.1.1
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_slavery
					has_trait = trait_mechanical
				}
			}
			# new species is purged
			success_text = {
				text = hfe_population.52.desc.5.0.0
				is_country = from
				has_country_flag = hfe_population.50_citizenship_purge
				not = {
					has_trait = trait_mechanical
				}
			}
			success_text = {
				text = hfe_population.52.desc.5.0.1
				is_country = from
				has_country_flag = hfe_population.50_citizenship_purge
				has_trait = trait_mechanical
			}
			success_text = {
				text = hfe_population.52.desc.5.1.0
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_purge
					nor = {
						has_country_flag = hfe_population.50_was_purifiers
						has_trait = trait_mechanical
					}
				}
			}
			success_text = {
				text = hfe_population.52.desc.5.1.1
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_purge
					has_country_flag = hfe_population.50_was_purifiers
					not = {
						has_trait = trait_mechanical
					}
				}
			}
			success_text = {
				text = hfe_population.52.desc.5.1.2
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_citizenship_purge
					has_trait = trait_mechanical
				}
			}
			# became robo hive
			success_text = {
				text = hfe_population.52.desc.6.0.0
				is_country = from
				has_country_flag = hfe_population.50_switch_to_robot_hive
				nor = {
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
					has_valid_civic = civic_machine_terminator
				}
			}
			success_text = {
				text = hfe_population.52.desc.6.0.1.0
				is_country = from
				has_country_flag = hfe_population.50_switch_to_robot_hive
				has_valid_civic = civic_machine_servitor
			}
			success_text = {
				text = hfe_population.52.desc.6.0.1.1
				is_country = from
				has_country_flag = hfe_population.50_switch_to_robot_hive
				has_valid_civic = civic_machine_servitor
				exists = event_target:hfe_event_target_5
			}
			success_text = {
				text = hfe_population.52.desc.6.0.2.0
				is_country = from
				has_country_flag = hfe_population.50_switch_to_robot_hive
				has_valid_civic = civic_machine_assimilator
			}
			success_text = {
				text = hfe_population.52.desc.6.0.2.1
				is_country = from
				has_country_flag = hfe_population.50_switch_to_robot_hive
				has_valid_civic = civic_machine_assimilator
				exists = event_target:hfe_event_target_5
			}
			success_text = {
				text = hfe_population.52.desc.6.0.3.0
				is_country = from
				has_country_flag = hfe_population.50_switch_to_robot_hive
				has_valid_civic = civic_machine_terminator
			}
			success_text = {
				text = hfe_population.52.desc.6.0.3.1
				is_country = from
				has_country_flag = hfe_population.50_switch_to_robot_hive
				has_valid_civic = civic_machine_terminator
				exists = event_target:hfe_event_target_5
			}
			success_text = {
				text = hfe_population.52.desc.6.1.0
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_to_robot_hive
				}
			}
			success_text = {
				text = hfe_population.52.desc.6.1.1
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_to_robot_hive
					nor = {
						has_valid_civic = civic_machine_servitor
						has_valid_civic = civic_machine_assimilator
						has_valid_civic = civic_machine_terminator
					}
				}
			}
			success_text = {
				text = hfe_population.52.desc.6.1.2
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_to_robot_hive
					has_valid_civic = civic_machine_servitor
				}
			}
			success_text = {
				text = hfe_population.52.desc.6.1.3
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_to_robot_hive
					has_valid_civic = civic_machine_assimilator
				}
			}
			success_text = {
				text = hfe_population.52.desc.6.1.4
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_to_robot_hive
					has_valid_civic = civic_machine_terminator
				}
			}
			# became bio hive
			success_text = {
				text = hfe_population.52.desc.7.0.0
				is_country = from
				has_country_flag = hfe_population.50_switch_to_bio_hive
			}
			success_text = {
				text = hfe_population.52.desc.7.0.1
				is_country = from
				has_country_flag = hfe_population.50_switch_to_bio_hive
				not = {
					has_valid_civic = civic_hive_devouring_swarm
				}
			}
			success_text = {
				text = hfe_population.52.desc.7.0.2
				is_country = from
				has_country_flag = hfe_population.50_switch_to_bio_hive
				has_valid_civic = civic_hive_devouring_swarm
			}
			success_text = {
				text = hfe_population.52.desc.7.1.0
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_to_bio_hive
					not = {
						has_valid_civic = civic_hive_devouring_swarm
					}
				}
			}
			success_text = {
				text = hfe_population.52.desc.7.1.1
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_to_bio_hive
					has_valid_civic = civic_hive_devouring_swarm
				}
			}
			# hives
			# from hive to regular
			success_text = {
				text = hfe_population.52.desc.8.0.0
				is_country = from
				has_country_flag = hfe_population.50_switch_from_hive
				has_country_flag = hfe_population.50_was_servitor
			}
			success_text = {
				text = hfe_population.52.desc.8.1.0
				not = {
					is_country = from
				}
				from = {
					has_country_flag = hfe_population.50_switch_from_hive
					has_country_flag = hfe_population.50_was_servitor
				}
			}
		}
	}
	# swith to hive
	picture = {
		trigger = {
			from = {
				has_country_flag = hfe_population.50_switch_to_robot_hive
			}
		}
		picture = GFX_evt_glitchy_matrix
	}
	picture = {
		trigger = {
			from = {
				has_country_flag = hfe_population.50_switch_to_bio_hive
			}
		}
		picture = GFX_evt_hive_mind
	}
	# bio pics for upgrade-subspecies
	picture = {
		trigger = {
			from = {
				is_hive_empire = yes
				has_country_flag = hfe_population.50_subspecies
			}
			has_country_flag = hfe_random_0
		}
		picture = GFX_evt_hive_mind
	}
	picture = {
		trigger = {
			from = {
				has_country_flag = hfe_population.50_subspecies
			}
			has_country_flag = hfe_random_0
		}
		picture = GFX_evt_society_research
	}
	picture = {
		trigger = {
			from = {
				has_country_flag = hfe_population.50_subspecies
			}
			has_country_flag = hfe_random_1
		}
		picture = GFX_evt_clones
	}
	picture = {
		trigger = {
			from = {
				has_country_flag = hfe_population.50_subspecies
			}
			has_country_flag = hfe_random_2
		}
		picture = GFX_evt_genetic_modification
	}
	picture = {
		trigger = {
			from = {
				has_country_flag = hfe_population.50_subspecies
			}
			has_country_flag = hfe_random_3
		}
		picture = GFX_evt_circuitry_modification
	}
	# robot pics
	picture = {
		trigger = {
			from = {
				has_trait = trait_mechanical
			}
			or = {
				has_country_flag = hfe_random_0
				has_country_flag = hfe_random_1
			}
		}
		picture = GFX_evt_robot_assembly_plant
	}
	picture = {
		trigger = {
			from = {
				has_trait = trait_mechanical
			}
			or = {
				has_country_flag = hfe_random_2
				has_country_flag = hfe_random_3
			}
		}
		picture = GFX_evt_sapient_AI
	}
	picture = GFX_evt_news_room
	show_sound = event_mystic_reveal_light
	location = from.capital_scope
	is_triggered_only = yes
	trigger = {
		is_ai = no
		exists = from.capital_scope
		nand = {
			not = {
				is_country = from
			}
			has_country_flag = hfe_population.52_block
		}
	}
	immediate = {
		hfe_effect_random_roll_flags_4_country = yes
		# for text
		if = {
			limit = {
				has_country_flag = hfe_population.50_switch_to_robot_hive
			}
			every_owned_species = {
				limit = {
					hfe_trigger_is_robot = no
				}
				hfe_effect_save_event_target = yes
			}
			every_relation = {
				limit = {
					hfe_trigger_is_robot = no
				}
				species = {
					hfe_effect_save_event_target = yes
				}
			}
		}
	}
	option = {
		name = hfe_population.52.0
		exclusive_trigger = {
			has_trait = trait_nerve_stapled
		}
	}
	option = {
		name = hfe_population.52.1
		exclusive_trigger = {
			is_country = from
			has_country_flag = hfe_population_recent_modification
		}
	}
	option = {
		name = INTERESTING
	}
	option = {
		name = hfe_block
		custom_tooltip = hfe_block.tooltip
		trigger = {
			not = {
				is_country = from
			}
		}
		hidden_effect = {
			set_country_flag = hfe_population.52_block
		}
	}
}

# border conflict 100
country_event = {
	id = hfe_population.100
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_country_type = default
		hfe_trigger_population_enabled = yes
	}
	immediate = {
		random_neighbor_country = {
			limit = {
				has_communications = root
				is_country_type = default
				nor = {
					is_in_federation_with = root
					and = {
						exists = overlord
						overlord = {
							is_country = root
						}
					}
				}
				any_system_within_border = {
					is_neighbor_of = root
					not = {
						root = {
							has_claim = prev
						}
					}
				}
			}
			weights = {
				base = 1
				modifier = {
					add = 10
					their_opinion = {
						who = root
						value < 0
					}
				}
				modifier = {
					add = 10
					their_opinion = {
						who = root
						value < -50
					}
				}
				modifier = {
					add = 10
					their_opinion = {
						who = root
						value < -100
					}
				}
				modifier = {
					add = 10
					their_opinion = {
						who = root
						value < -150
					}
				}
				modifier = {
					add = 10
					their_opinion = {
						who = root
						value < -200
					}
				}
			}
			random_system_within_border = {
				limit = {
					not = {
						root = {
							has_claim = prev
						}
					}
				}
				add_claims = {
					who = root
				}
				save_event_target_as = hfe_population_100_location
				owner = {
					country_event = {
						id = hfe_population.102
						days = 1
						random = 15
					}
				}
			}
		}
		country_event = {
			id = hfe_population.101
			days = 1
			random = 15
		}
	}
}

country_event = {
	id = hfe_population.101
	title = hfe_population.101.name
	desc = hfe_population.101.desc
	picture = GFX_evt_mining_station
	location = event_target:hfe_population_100_location
	show_sound = event_space_battle
	is_triggered_only = yes
	trigger = {
		is_ai = no
		exists = event_target:hfe_population_100_location
	}
	option = {
		name = hfe_population.101.0
	}
}

country_event = {
	id = hfe_population.102
	title = hfe_population.102.name
	desc = hfe_population.102.desc
	picture = GFX_evt_mining_station
	location = event_target:hfe_population_100_location
	show_sound = event_space_battle
	is_triggered_only = yes
	trigger = {
		is_ai = no
		exists = event_target:hfe_population_100_location
	}
	option = {
		name = hfe_population.102.0
	}
}

# navigator spawn anomaly 110
country_event = {
	id = hfe_population.110
	title = hfe_population.110.name
	desc = hfe_population.110.desc
	picture = GFX_evt_psionics
	location = event_target:hfe_population_110_location
	show_sound = event_mystic_reveal_light
	is_triggered_only = yes
	trigger = {
		not = {
			has_global_flag = hfe_has_event_population.110
		}
		hfe_trigger_population_enabled = yes
		has_psionic_species_trait = yes
	}
	immediate = {
		set_global_flag = hfe_has_event_population.110
		random_system_within_border = {
			limit = {
				count_system_planet = {
					count = 1
					limit = {
						is_star = yes
					}
				}
				any_system_planet = {
					not = {
						exists = owner
					}
					is_star = no
					habitable_planet = no
				}
			}
			star = {
				save_event_target_as = hfe_population_110_location
				add_anomaly = {
					category = hfe_anomaly_population_navigator
				}
			}
		}
	}
	option = {
		name = hfe_population.110.0
		tooltip = {
			event_target:hfe_population_110_location = {
				add_anomaly = {
					category = hfe_anomaly_population_navigator
				}
			}
		}
	}
}

# after anomaly
ship_event = {
	id = hfe_population.111
	title = hfe_population.111.name
	desc = hfe_population.111.desc
	picture = GFX_evt_psionics
	location = event_target:hfe_population_110_location
	show_sound = event_mystic_reveal_light
	is_triggered_only = yes
	trigger = {
		exists = from
		exists = owner
		exists = solar_system
	}
	immediate = {
		from = {
			hfe_effect_remove_signal_object_from_this = yes
			save_event_target_as = hfe_population_110_location
		}
		solar_system = {
			random_system_planet = {
				limit = {
					not = {
						exists = owner
					}
					is_star = no
					habitable_planet = no
				}
				save_event_target_as = hfe_population_110_planet
			}
		}
	}
	option = {
		name = hfe_population.111.0
		owner = {
			add_research_option = hfe_tech_population_navigator
		}
	}
}

country_event = {
	id = hfe_population.112
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		last_increased_tech = hfe_tech_population_navigator
	}
	immediate = {
		every_relation = {
			country_event = {
				id = hfe_population.113
			}
		}
	}
}

country_event = {
	id = hfe_population.113
	title = hfe_population.113.name
	desc = {
		trigger = {
			text = hfe_population.113.desc.0
			success_text = {
				text = hfe_population.113.desc.1.0
				has_technology = tech_mine_zro
			}
			fail_text = {
				text = hfe_population.113.desc.1.1
				has_technology = tech_mine_zro
			}
		}
	}
	picture = GFX_evt_psionics
	location = from.capital_scope
	show_sound = event_mystic_reveal_light
	is_triggered_only = yes
	trigger = {
		is_ai = no
		exists = from.capital_scope
		has_psionic_species_trait = yes
	}
	option = {
		name = hfe_population.113.0
	}
}

# on_building_complete on_building_upgraded on_building_demolished on_building_replaced
# planet shield
planet_event = {
	id = hfe_population.114
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		#hfe_trigger_population_enabled = yes
		hfe_trigger_population_planetary_shield_enabled = yes
		#last_building_changed = building_planetary_shield_generator
	}
	immediate = {
		if = {
			limit = {
				has_building = building_planetary_shield_generator
				# already have
				not = {
					solar_system = {
						any_ambient_object = {
							has_ambient_object_flag = hfe_population_object_shield@root
						}
					}
				}
			}
			if = {
				limit = {
					is_planet_class = pc_ringworld_habitable
				}
				# create_ambient_object = {
				# 	location = root
				# 	type = hfe_object_population_shield_ringworld
				# 	entity_offset_angle = {
				# 		min = 90
				# 		max = 90
				# 	}
				# 	use_3d_location = yes
				# 	entity_face_object = star
				# 	entity_scale_to_size = yes
				# 	scale = 0.15
				# }
			}
			else = {
				create_ambient_object = {
					location = root
					type = hfe_object_population_shield
					use_3d_location = yes
					entity_scale_to_size = yes
					scale = 0.15
				}
			}
			last_created_ambient_object = {
				set_ambient_object_flag = hfe_population_object_shield@root
			}
		}
		else = {
			solar_system = {
				every_system_ambient_object = {
					limit = {
						has_ambient_object_flag = hfe_population_object_shield@root
					}
					destroy_ambient_object = this
				}
			}
		}
	}
}
