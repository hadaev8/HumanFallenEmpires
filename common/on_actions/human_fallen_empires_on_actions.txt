# No scope, like on_game_start
on_yearly_pulse = {
	events = {
		human_fallen_empires.1
	}
}

# No scope, like on_game_start
on_bi_yearly_pulse = {
	events = {
		human_fallen_empires.2
	}
}

# No scope, like on_game_start
on_decade_pulse = {
	events = {
		human_fallen_empires.3
		human_fallen_empires_primitive.3
	}
}

# Triggers when the game starts
on_game_start = {
	events = {
		human_fallen_empires_init.0
	}
}

on_game_start_country = {
	events = {
		# discovery start
		human_fallen_empires_discovery.0
		# exodus civic
		human_fallen_empires_features.4
		# early colonization civic
		human_fallen_empires_features.10
		# early contact civic
		human_fallen_empires_features.11
		# brainworm_reservation civic
		human_fallen_empires_brainworm.101
		# spiral_of_death civic
		human_fallen_empires_features_spiral_of_death.0
		# sanctuary civic
		human_fallen_empires_features.12
	}
}

# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
on_leader_spawned = {
	events = {
		# add pirate trait to admiral
		human_fallen_empires_pirate.55
		# change brainworm leader species
		human_fallen_empires_brainworm.6
		# fixing leaders traits
		human_fallen_empires_leaders.104
	}
}

# called during empire initialization when starting a new game
# scope: country
# empire_init_add_technologies = {
# 	events = {

# 	}
# }

# Called during empire initialization when starting a new game if has_secondary_species game rule is true.
# Called before empire_init_create_capital_pops.
# scope: planet
# from: secondary species
empire_init_create_capital_secondary_pops = {
	events = {
		human_fallen_empires_brainworm.100	# secondary species: assign trait_machine_unit, turn into robotics, then create pops
		# at this point the species might have changed (because we added traits), so FROM might not be the secondary species anymore
	}
}

# called during empire initialization when starting a new game
# This on_action should always result in the creation of at least one new pop
# scope: planet
empire_init_create_capital_pops = {
 	events = {
		# brainworm
		human_fallen_empires_brainworm.0
 	}
}

# called during empire initialization when starting a new game
# scope: country
# empire_init_create_ships = {
# 	events = {
# 		# discovery
# 		#human_fallen_empires_discovery.1
# 		#human_fallen_empires_discovery.0
# 	}
# }

# A leader leveled up.
# Scope = Country
# From = Leader
on_leader_level_up = {
	events = {
		# new traits
		human_fallen_empires_leaders.1
	}
}

# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
on_tech_increased = {
	events = {
		# plague explane
		human_fallen_empires_plague.9
		# gain scientist
		human_fallen_empires_leaders.20
	}
}

# Triggers when a Special Project to apply a species modification template has completed.
# Note that this will trigger once for each combination of planet & original species.
#
# This = Country
# From = Species ( Post Modification )
on_modification_complete = {
	events = {
		human_fallen_empires_population.51
	}
}

# Triggers event when a system is entered by ships from a country (not pirate or monsters) for the first time
# Scope = Ship
# From = System
# FromFrom = Country
on_entering_system_first_time = {
	events = {
		# ahet home
		human_fallen_empires.410
		# copernicus
		human_fallen_empires.355
		# random story events
		human_fallen_empires_discovery.500
		# add comms with enclaves
		human_fallen_empires_discovery.56
		# drones survey
		human_fallen_empires_maintenance.3
	}
	random_events = {
		100 = 0
		# varelse fleet event
		1 = human_fallen_empires.51
		# thoth start
		1 = human_fallen_empires.700
	}
}

# Triggered when two empires discover each other
on_first_contact = {
	events = {
		human_fallen_empires_discovery.50
		human_fallen_empires_discovery.52
		# contact with egypt
		human_fallen_empires.46
		# contact with future
		human_fallen_empires.5000
		# contact with drone
		human_fallen_empires.604
		# abort find sol chain
		human_fallen_empires.351
		# abort find future chain
		human_fallen_empires.5071
	}
}

# Triggers when trying to open the diplomacy view for countries with custom diplomacy.
# Country scope
# This = target country (player)
# From = source country
on_custom_diplomacy = {
	events = {
		# pirate
		human_fallen_empires_pirate.100
		# thoth
		human_fallen_empires.710
	}
}

# A ship has surveyed a planet.
# Scope = Ship
# From = Planet
on_survey = {
	events = {
		human_fallen_empires.100
		# ahet colony
		human_fallen_empires.400
		human_fallen_empires.401
		# gain scientist
		human_fallen_empires_leaders.21
		# ahet home
		human_fallen_empires.411
		# copernicus
		human_fallen_empires.356
		human_fallen_empires.357
		human_fallen_empires.358
		# spiral_of_death colony
		human_fallen_empires_features_spiral_of_death.12
	}
}

# Triggers event when ship enters a system
# Scope = Ship
# From = System
# FromFrom = Country
# on_entering_system = {
	# events = {
	# }
# }

# A fleet has entered a system
# Scope = Fleet
# From = System
on_entering_system_fleet = {
	events = {
		# find sol event chain
		human_fallen_empires.350
		# check enemy in system
		human_fallen_empires_discovery.103
		# change outpost owner for pirates
		human_fallen_empires_pirate.62
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	events = {
		# discovery gain resurces
		human_fallen_empires_discovery.100
		# pirate gain resurces
		human_fallen_empires_pirate.52
		# kill check for contracts
		human_fallen_empires_discovery.101
		human_fallen_empires_discovery.102
		# aggressive diplomacy civic
		human_fallen_empires_features.7
		# for human_fallen_empires_chain_pirate_count counters
		human_fallen_empires_pirate.60
	}
}

# This = owner of ship 1 (destroyed)
# From = owner of ship 2 (combatant)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_victim = {
	events = {
		# discovery killed end game
		human_fallen_empires_discovery.51
		# kill country then station killed
		human_fallen_empires.726
	}
}

# This = owner of fleet 1 (combatant)
# From = owner of fleet 2 (destroyed)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_fleet_destroyed_perp = {
	events = {
		# gain admiral
		human_fallen_empires_leaders.30
	}
}

# A ship has been built
# Root = Ship
# From = Planet
on_ship_built = {
	events = {
		# pirate logic
		human_fallen_empires_pirate.4
		# gain admiral
		human_fallen_empires_leaders.31
		# remove pop from planet after colony ship build
		human_fallen_empires_population.6
	}
}

#From = Planet scope
#This = Fleet scope
on_fleet_enter_orbit = {
	events = {
		# docking event
		human_fallen_empires_discovery.150
	}
}

#This = destroyed country
#From = optional, destroyer (country)
on_country_destroyed = {
	events = {
		human_fallen_empires_pirate.58
	}
}

# A ship has started a new order
# Root = Ship
# From = Country
on_ship_order = {
	events = {
		human_fallen_empires_pirate.54
	}
}

# This = Ship
# From = Disabler Ship
on_ship_disabled = {
	events = {
		# kill starbases of drone
		human_fallen_empires_maintenance.0
		# kill fleet pirate starbase
		human_fallen_empires_pirate.56
		# pirate gain resources after disabling starbase
		human_fallen_empires_pirate.59
		# annex occupying systems starbase on total war
		human_fallen_empires_total_war.52
	}
}

# A fleet has successfully escaped from combat, executed right before the fleet enters FTL
# This = escaping fleet
# From = system escaped from
# FromFrom = system escaping to
on_emergency_ftl = {
	events = {
		human_fallen_empires_pirate.51
	}
}

#A building construction has been completed.
# From = Army
# this = Planet
on_army_recruited = {
	events = {
		human_fallen_empires_leaders.41
	}
}

# A building construction has demolished.
# This = Planet
# From = Tile
on_building_demolished = {
	events = {
		# building_assimilator feature
		human_fallen_empires_maintenance.13
	}
}

# A building construction has finished, replacing another building.
# This = Planet
# From = Tile
on_building_replaced = {
	events = {
		# building_assimilator feature
		human_fallen_empires_maintenance.13
	}
}

# A war is beginning, executed for every country in the war.
# Root = Country
# From = War
on_war_beginning = {
	events = {
		# invite every subjects to war
		human_fallen_empires_total_war.0
		# start war in heavens
		human_fallen_empires_total_war.1011
	}
}

# This = country
# From = opponent war leader
on_entering_war = {
	events = {
		# aggressive diplomacy civic
		human_fallen_empires_features.9
	}
}

# A war has been won
# Root = Winner Warleader
# From = Loser Warleader
# FromFrom = War
on_war_won = {
	events = {
		human_fallen_empires_discovery.53
	}
}

# A war has been won, by force
# Root = Winner Warleader
# From = Loser Warleader
# FromFrom = War
on_war_won_forced = {
	events = {
		human_fallen_empires_discovery.53
	}
}

# A war has been lost
# Root = Loser Warleader
# From = Winner Warleader
# FromFrom = War
on_war_lost = {
	events = {
		human_fallen_empires_discovery.53
	}
}

# A war has been lost, by force
# Root = Loser Warleader
# From = Winner Warleader
# FromFrom = War
on_war_lost_forced = {
	events = {
		human_fallen_empires_discovery.53
	}
}

# Triggers country_event for the attacker upon victory
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
on_planet_attackers_win = {
	events = {
		# gain general
		human_fallen_empires_leaders.40
		# teachable lvl up
		human_fallen_empires_leaders.102
	}
}

# Triggers country_event for the defender upon victory
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_win = {
	events = {
		# gain general
		human_fallen_empires_leaders.40
		# teachable lvl up
		human_fallen_empires_leaders.102
	}
}

on_added_pop = {
	events = {
		# set populated modifier on planet
		human_fallen_empires_population.0
		# brainworm
		human_fallen_empires_brainworm.1
		# building_assimilator feature
		human_fallen_empires_maintenance.11
		human_fallen_empires_maintenance.12
	}
}

# A pop has finished migrating to another planet
# Root = pop
# From = Tile on the new planet
# FromFrom = Tile on the old planet
on_pop_migration_end = {
	events = {
		# set populated modifier on planet
		human_fallen_empires_population.0
		# plague
		human_fallen_empires_plague.3
		# brainworm
		human_fallen_empires_brainworm.1
		# building_assimilator feature
		human_fallen_empires_maintenance.11
		human_fallen_empires_maintenance.12
	}
}

# A pop has been moved to another tile
# Root = pop
# From = previous tile
on_pop_moved = {
	events = {
		# brainworm
		human_fallen_empires_brainworm.2
		# building_assimilator feature
		human_fallen_empires_maintenance.11
		human_fallen_empires_maintenance.12
	}
}

# A pop has been resettled to another planet
# Root = pop
# From = Tile on the old planet
on_pop_resettled = {
	events = {
		# set populated modifier on planet
		human_fallen_empires_population.0
		# brainworm
		human_fallen_empires_brainworm.2
		# building_assimilator feature
		human_fallen_empires_maintenance.11
		human_fallen_empires_maintenance.12
	}
}

# A pop has been born
# This = pop
on_pop_birth = {
	events = {
		# set populated modifier on planet
		human_fallen_empires_population.0
		# brainworm
		human_fallen_empires_brainworm.2
	}
}

# A pop has been built
# This = pop
on_buildable_pop_created = {
	events = {
		# set populated modifier on planet
		human_fallen_empires_population.0
	}
}

# A pop has become fully grown
# This = pop
on_pop_fully_grown = {
	events = {
		# set populated modifier on planet
		human_fallen_empires_population.0
		# brainworm
		human_fallen_empires_brainworm.2
		# gain governor
		human_fallen_empires_leaders.13
	}
}

# Pop is released from slavery
# This = Pop scope
# owner_species = { (species)
# owner = { owner_species = { (empire main species)
# owner = { (empire)
on_pop_emancipated = {
	events = {
		human_fallen_empires_population.11
	}
}

#A building construction has been completed.
# This = Planet
# From = Tile
on_building_complete = {
	events = {
		# gain governor
		human_fallen_empires_leaders.10
	}
}

# A building construction has been completed, which is an upgrade of previous building.
# This = Planet
# From = Tile
on_building_upgraded = {
	events = {
		# gain governor
		human_fallen_empires_leaders.11
	}
}

# A planet has begun the colonization process.
# Scope = Planet
on_colonization_started = {
	events = {
		# spiral_of_death first colony
		human_fallen_empires_features_spiral_of_death.13
	}
}

# A planet has been colonized.
# Scope = Planet
on_colonized = {
	events = {
		human_fallen_empires_population.1
		# gain governor
		human_fallen_empires_leaders.12
		# biobomb
		human_fallen_empires_features.1
		# exodus
		human_fallen_empires_features.3
	}
}

# A colony has been destroyed. Called just before owner and controller is cleared
# Scope = Planet
# on_colony_destroyed = {
# 	events = {
# 		human_fallen_empires_population.1
# 	}
# }

# This = owner of fleet 1
# From = owner of fleet 2
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_entering_battle = {
	events = {
		human_fallen_empires_pirate.61
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
		# add afraid demons trait
		human_fallen_empires_leaders.105
	}
}


# This = construction ship
# From = planet it is built on
# Fires when construction is complete,
# immediately before station is created
on_building_research_station = {
	events = {
		human_fallen_empires.5061
	}
}


on_building_starbase_outpost = {
	events = {
		human_fallen_empires_maintenance.1
	}
}

# From = Tile
# This = Planet
on_blocker_cleared = {
	events = {
		human_fallen_empires_population.1
		# gain governor
		human_fallen_empires_leaders.10
	}
}

# Planet has reached 0 health from orbital bombardment
# This = Planet
# From = Bombarder
on_planet_zero_health = {
	events = {
		human_fallen_empires_maintenance.2
		# pirate bombard planet
		human_fallen_empires_pirate.53
		# convert pirate planet to asteroid
		human_fallen_empires_pirate.57
		# plague bombardment
		human_fallen_empires_plague.161
	}
}

#From = Country scope
#This = Planet scope
on_planet_ownerless = {
	events = {
		# remove modifiers
		human_fallen_empires_population.7
		# convert pirate planet to asteroid
		human_fallen_empires_pirate.57
	}
}

#From = Country scope
#This = Planet scope
on_planet_transfer = {
	events = {
		human_fallen_empires_population.1
		# copernicus
		human_fallen_empires.363
		# aggressive diplomacy civic
		human_fallen_empires_features.8
		# convert pirate planet to asteroid
		human_fallen_empires_pirate.57
	}
}

#This = Planet scope
#From = Country
on_purge_complete = {
	events = {
		human_fallen_empires_population.1
		human_fallen_empires_plague.6
		# building_assimilator feature
		human_fallen_empires_maintenance.10
	}
}

# Planet has been terraformed
# This = Planet
# From = Terraforming country
on_terraforming_complete = {
	events = {
		# terraforming ruler reward
		human_fallen_empires_leaders.100
		# remove plague bombarding modifier
		human_fallen_empires_plague.153
	}
}

# A planets controller becomes a country not the same as the owner.
# Root = Planet
# From = Planet Owner
# FromFrom = Planet Controller (the one occupying)
on_planet_occupied = {
	events = {
		# zombie tale planet
		human_fallen_empires_plague.5
		# retake planet from zombie
		human_fallen_empires_plague.7
		# annex occupying systems
		human_fallen_empires_total_war.51
	}
}

# Triggers country_event for the defender upon defeat
# This = country, planet owner
# From = country, attack leader
# FromFrom = planet
on_planet_defenders_lose = {
	events = {
		# take occupyd by zombies planet
		#human_fallen_empires_plague.8
	}
}

# X years has passed since a planet was colonized (won't trigger on empire homeworld)
on_colony_1_year_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_2_years_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_3_years_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_4_years_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_5_years_old = {
	random_events = {
		20 = 0

		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_6_years_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_7_years_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_8_years_old = {
	random_events = {
		20 = 0

		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_9_years_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}

on_colony_10_years_old = {
	random_events = {
		20 = 0
		1 = human_fallen_empires.150
		1 = human_fallen_empires.200
		1 = human_fallen_empires.250
		1 = human_fallen_empires.300
	}
}
