#
# for country/planet
hfe_effect_refuge_20 = {
	every_owned_pop = {
		random = {
			chance = 20
			hfe_effect_refuge_or_die = yes
		}
	}
}

# for pop
hfe_effect_refuge_or_die = {
	#	log = "pop refuge effect $thisgetname$"
	if = {
		limit = {
			hfe_trigger_is_robot = no
			nor = {
				has_trait = trait_hive_mind
				has_trait = trait_nerve_stapled
			}
			exists = owner
			owner = {
				any_relation = {
					num_pops > 0
					hfe_trigger_is_awake = yes
					any_owned_planet = {
						hfe_trigger_planet_valid_for_settle = yes
					}
				}
			}
		}
		save_event_target_as = hfe_refuge_pop_target
		owner = {
			save_event_target_as = hfe_refuge_pop_target_owner
			random_relation = {
				limit = {
					num_pops > 0
					hfe_trigger_is_awake = yes
					any_owned_planet = {
						hfe_trigger_planet_valid_for_settle = yes
						# habitability = {
						# 	who = event_target:hfe_refuge_pop_target
						# 	value >= 0.2
						# }
					}
				}
				weights = {
					base = 10
					modifier = {
						factor = 10000
						has_country_flag = hfe_refuge_country_prior@prev
					}
					# policy
					modifier = {
						factor = 2
						has_policy_flag = refugees_allowed
					}
					# block by refugees policy
					modifier = {
						factor = 0.01
						or = {
							and = {
								has_policy_flag = refugees_not_allowed
								not = {
									is_same_species = event_target:hfe_refuge_pop_target
								}
							}
							and = {
								has_policy_flag = refugees_only_citizens
								event_target:hfe_refuge_pop_target = {
									nor = {
										is_same_species = prev
										hfe_trigger_is_citizen = {
											country = prev
										}
									}
								}
							}
						}
					}
					# citizenship type
					modifier = {
						factor = 8
						event_target:hfe_refuge_pop_target = {
							hfe_trigger_is_citizen = {
								country = prev
							}
						}
					}
					modifier = {
						factor = 2
						event_target:hfe_refuge_pop_target = {
							has_citizenship_type = {
								type = citizenship_limited
								country = prev
							}
						}
					}
					modifier = {
						factor = 0.5
						event_target:hfe_refuge_pop_target = {
							has_citizenship_type = {
								type = citizenship_assimilation
								country = prev
							}
						}
					}
					modifier = {
						factor = 0.25
						event_target:hfe_refuge_pop_target = {
							has_citizenship_type = {
								type = citizenship_slavery
								country = prev
							}
						}
					}
					# habitability
					modifier = {
						factor = 2
						any_owned_planet = {
							hfe_trigger_planet_valid_for_settle = yes
							habitability = {
								who = event_target:hfe_refuge_pop_target
								value >= 0.8
							}
						}
					}
					modifier = {
						factor = 2
						any_owned_planet = {
							hfe_trigger_planet_valid_for_settle = yes
							habitability = {
								who = event_target:hfe_refuge_pop_target
								value >= 0.6
							}
						}
					}
					modifier = {
						factor = 2
						any_owned_planet = {
							hfe_trigger_planet_valid_for_settle = yes
							habitability = {
								who = event_target:hfe_refuge_pop_target
								value >= 0.4
							}
						}
					}
				}
				event_target:hfe_refuge_pop_target = {
					remove_modifier = pop_recently_conquered
					add_modifier = {
						modifier = recent_refugee
						years = 10
					}
					save_event_target_as = hfe_settle_pop_target
				}
				hfe_effect_settle_pop = yes
			}
		}
	}
	else = {
		#		log = "refuge pop killed $thisgetname$"
		kill_pop = yes
	}
}

# for country need hfe_settle_pop_target
hfe_effect_settle_pop = {
	if = {
		limit = {
			not = {
				exists = event_target:hfe_settle_pop_target
			}
		}
	}
	else_if = {
		limit = {
			not = {
				any_owned_planet = {
					hfe_trigger_planet_valid_for_settle = yes
				}
			}
		}
		event_target:hfe_settle_pop_target = {
			#			log = "ERROR: looping in settle pop"
			#			hfe_effect_refuge_or_die = yes
			kill_pop = yes
		}
	}
	else = {
		random_owned_planet = {
			limit = {
				hfe_trigger_planet_valid_for_settle = yes
			}
			weights = {
				base = 10
				modifier = {
					factor = 10
					has_modifier = slave_colony
					event_target:hfe_settle_pop_target = {
						has_citizenship_type = {
							type = citizenship_slavery
							country = prevprev
						}
					}
				}
				complex_trigger_modifier = {
					trigger = habitability
					parameters = {
						who = event_target:hfe_settle_pop_target
					}
					# TODO check how it works is it mul to base above or some inner value?
					mode = factor
				}
				mult = value:hfe_script_value_free_jobs
				modifier = {
					factor = 0.5
					free_housing < 0
				}
				modifier = {
					factor = 0.1
					free_housing < -5
				}
			}
			resettle_pop = {
				pop = event_target:hfe_settle_pop_target
				planet = this
			}
			event_target:hfe_settle_pop_target = {
				if = {
					limit = {
						has_modifier = recent_refugee
					}
					clear_pop_category = yes
					create_message = {
						type = MESSAGE_TYPE_REFUGEES_ARRIVED
						localization = MESSAGE_REFUGEES_ARRIVED
						days = 10
						target = prev
						variable = {
							type = name
							localization = SPECIES
							scope = this.species
						}
						variable = {
							type = name
							localization = PLANET
							scope = prev
						}
						variable = {
							type = name
							localization = COUNTRY
							scope = event_target:hfe_refuge_pop_target_owner
						}
					}
				}
				hfe_effect_population_fix_robot_pop = yes
			}
			# log = "pop moved to \\[this.GetName]"
		}
	}
}

# for country need hfe_settle_pop_target
hfe_effect_settle_pop_from_slavery_buff = {
	event_target:hfe_settle_pop_target = {
		pop_event = {
			id = hfe_maintenance.6
		}
	}
}

# for pop
hfe_effect_species_add_modded_trait = {
	random_list = {
		1 = {
			modifier = {
				factor = 0
				$species$ = {
					has_trait = hfe_species_trait_hucksters
				}
			}
			modify_species = {
				species = $species$
				add_trait = hfe_species_trait_hucksters
			}
		}
		1 = {
			modifier = {
				factor = 0
				$species$ = {
					has_trait = hfe_species_trait_war_fans
				}
			}
			modify_species = {
				species = $species$
				add_trait = hfe_species_trait_war_fans
			}
		}
		2 = {
			modifier = {
				factor = 0
				$species$ = {
					has_trait = hfe_species_trait_error
				}
			}
			modify_species = {
				species = $species$
				add_trait = hfe_species_trait_error
			}
		}
		2 = {
			modifier = {
				factor = 0
				$species$ = {
					has_trait = hfe_species_trait_happy_slave
				}
			}
			modify_species = {
				species = $species$
				add_trait = hfe_species_trait_happy_slave
			}
		}
		1 = {
			modifier = {
				factor = 0
				$species$ = {
					has_trait = hfe_species_trait_clever_beast
				}
			}
			modify_species = {
				species = $species$
				add_trait = hfe_species_trait_clever_beast
			}
		}
	}
}

# hfe_effect_leader_add_vanilla_or_modded_trait = {
# 	random_list = {
# 		# same as vanilla, but removed notification
# 		1 = {
# 			hfe_effect_vanilla_copy_past_add_random_leader_trait = yes
# 		}
# 		# mod's traits
# 		1 = {
# 			hfe_effect_leaders_add_random_trait = yes
# 		}
# 	}
# }

# hfe_effect_leader_add_trait_random = {
# 	if = {
# 		limit = {
# 			num_traits < 3
# 		}
# 		random_list = {
# 			90 = {
# 			}
# 			10 = {
# 				modifier = {
# 					factor = trigger:has_level
# 				}
# 				$trait_effect$ = yes
# 			}
# 		}
# 	}
# }

hfe_effect_event_47_next = {
	hidden_effect = {
		switch = {
			trigger = has_country_flag
			hfe.47.step4 = {
				# it also remove other non step flags
				hfe_effect_event_47_clear_flags = yes
				if = {
					limit = {
						has_country_flag = hfe_egypt_wormhole
					}
					remove_country_flag = hfe_egypt_wormhole
					random_list = {
						1 = {
							country_event = {
								id = hfe.55
								days = 1
								random = 15
							}
						}
						1 = {
						}
					}
				}
			}
			hfe.47.step3 = {
				remove_country_flag = hfe.47.step3
				set_country_flag = hfe.47.step4
				country_event = {
					id = hfe.47
				}
			}
			hfe.47.step2 = {
				remove_country_flag = hfe.47.step2
				set_country_flag = hfe.47.step3
				country_event = {
					id = hfe.47
				}
			}
			hfe.47.step1 = {
				remove_country_flag = hfe.47.step1
				set_country_flag = hfe.47.step2
				country_event = {
					id = hfe.47
				}
			}
			hfe.47.step0 = {
				remove_country_flag = hfe.47.step0
				set_country_flag = hfe.47.step1
				country_event = {
					id = hfe.47
				}
			}
		}
	}
}

hfe_effect_event_47_clear_flags = {
	hidden_effect = {
		remove_country_flag = hfe.47.step3_bad_news.0
		remove_country_flag = hfe.47.step3_bad_news.1
		remove_country_flag = hfe.47.step0
		remove_country_flag = hfe.47.step1
		remove_country_flag = hfe.47.step2
		remove_country_flag = hfe.47.step3
		remove_country_flag = hfe.47.step4
	}
}

hfe_effect_event_53_next = {
	hidden_effect = {
		switch = {
			trigger = has_country_flag
			hfe.53.0 = {
				remove_country_flag = hfe.53.0
				set_country_flag = hfe.53.1
			}
			hfe.53.1 = {
				remove_country_flag = hfe.53.1
				set_country_flag = hfe.53.2
			}
		}
		country_event = {
			id = hfe.53
		}
	}
}

hfe_effect_event_702_next = {
	hidden_effect = {
		switch = {
			trigger = has_country_flag
			hfe.702.0 = {
				remove_country_flag = hfe.702.0
				set_country_flag = hfe.702.1
			}
			hfe.702.1 = {
				remove_country_flag = hfe.702.1
				set_country_flag = hfe.702.2
			}
			hfe.702.2 = {
				remove_country_flag = hfe.702.2
				set_country_flag = hfe.702.3
			}
			hfe.702.3 = {
				remove_country_flag = hfe.702.3
				set_country_flag = hfe.702.4
			}
			hfe.702.4 = {
				remove_country_flag = hfe.702.4
				set_country_flag = hfe.702.5
			}
			hfe.702.5 = {
				remove_country_flag = hfe.702.5
				set_country_flag = hfe.702.6
			}
			hfe.702.6 = {
				remove_country_flag = hfe.702.6
				set_country_flag = hfe.702.7
			}
			hfe.702.7 = {
				remove_country_flag = hfe.702.7
			}
		}
		if = {
			limit = {
				or = {
					has_country_flag = hfe.702.6
					has_country_flag = hfe.702.7
					has_country_flag = hfe.702.goodend
					has_country_flag = hfe.702.badend
				}
			}
			country_event = {
				id = hfe.703
			}
		}
		else = {
			country_event = {
				id = hfe.702
			}
		}
	}
}

hfe_effect_event_711_next = {
	hidden_effect = {
		switch = {
			trigger = has_country_flag
			default = {
				set_country_flag = hfe.711.4.1
				country_event = {
					id = hfe.711
				}
			}
			hfe.711.4.1 = {
				remove_country_flag = hfe.711.4.1
				set_country_flag = hfe.711.4.2
				country_event = {
					id = hfe.711
				}
			}
			hfe.711.4.2 = {
				remove_country_flag = hfe.711.4.2
				set_country_flag = hfe.711.4.3
				country_event = {
					id = hfe.711
				}
			}
			hfe.711.4.3 = {
				remove_country_flag = hfe.711.4.3
				set_country_flag = hfe.711.4.4
				country_event = {
					id = hfe.711
				}
			}
			hfe.711.4.4 = {
				remove_country_flag = hfe.711.4.4
				set_country_flag = hfe.711.4.5
				country_event = {
					id = hfe.711
				}
			}
			hfe.711.4.5 = {
				remove_country_flag = hfe.711.4.5
				set_country_flag = hfe.711.dialog.0.complete
			}
		}
	}
}

hfe_effect_event_5001_next = {
	hidden_effect = {
		#		if = {
		#			limit = {
		#				NOT = {
		#					has_country_flag = hfe.5001.step0
		#					has_country_flag = hfe.5001.step1
		#					has_country_flag = hfe.5001.step2
		#					has_country_flag = hfe.5001.step3
		#					has_country_flag = hfe.5001.step4
		#					has_country_flag = hfe.5001.step5
		#					has_country_flag = hfe.5001.step6
		#					has_country_flag = hfe.5001.step7
		#					has_country_flag = hfe.5001.step5.human
		#					has_country_flag = hfe.5001.step4.human
		#					has_country_flag = hfe.5001.step3.human
		#					has_country_flag = hfe.5001.step2.human
		#				}
		#			}
		#			set_country_flag = hfe.5001.step0
		#		}
		switch = {
			trigger = has_country_flag
			hfe.5001.step0 = {
				remove_country_flag = hfe.5001.step0
				set_country_flag = hfe.5001.step1
				country_event = {
					id = hfe.5001
				}
			}
			hfe.5001.step1 = {
				remove_country_flag = hfe.5001.step1
				set_country_flag = hfe.5001.step2
				country_event = {
					id = hfe.5001
				}
			}
			hfe.5001.step2 = {
				remove_country_flag = hfe.5001.step2
				set_country_flag = hfe.5001.step3
				country_event = {
					id = hfe.5001
				}
			}
			hfe.5001.step3 = {
				remove_country_flag = hfe.5001.step3
				set_country_flag = hfe.5001.step4
				country_event = {
					id = hfe.5001
				}
			}
			hfe.5001.step4 = {
				remove_country_flag = hfe.5001.step4
				set_country_flag = hfe.5001.step5
				country_event = {
					id = hfe.5001
				}
			}
			hfe.5001.step5 = {
				remove_country_flag = hfe.5001.step5
				set_country_flag = hfe.5001.step6
				country_event = {
					id = hfe.5002
				}
			}
			hfe.5001.step6 = {
				remove_country_flag = hfe.5001.step6
				set_country_flag = hfe.5001.step7
				country_event = {
					id = hfe.5002
				}
			}
			hfe.5001.step7 = {
				remove_country_flag = hfe.5001.step7
				remove_country_flag = hfe.5001.step5.human
				remove_country_flag = hfe.5001.step4.human
				remove_country_flag = hfe.5001.step3.human
				remove_country_flag = hfe.5001.step2.human
			}
		}
	}
}

hfe_effect_event_5001_clear_flags = {
	hidden_effect = {
		remove_country_flag = hfe.5001.step0
		remove_country_flag = hfe.5001.step1
		remove_country_flag = hfe.5001.step2
		remove_country_flag = hfe.5001.step3
		remove_country_flag = hfe.5001.step4
		remove_country_flag = hfe.5001.step5
		remove_country_flag = hfe.5001.step6
		remove_country_flag = hfe.5001.step7
		remove_country_flag = hfe.5001.step5.human
		remove_country_flag = hfe.5001.step4.human
		remove_country_flag = hfe.5001.step3.human
		remove_country_flag = hfe.5001.step2.human
	}
}

hfe_effect_event_5091_next = {
	hidden_effect = {
		switch = {
			trigger = has_country_flag
			hfe.5091.step0 = {
				remove_country_flag = hfe.5091.step0
				set_country_flag = hfe.5091.step1
				country_event = {
					id = hfe.5091
				}
			}
			hfe.5091.step1 = {
				remove_country_flag = hfe.5091.step1
				set_country_flag = hfe.5091.step2
				country_event = {
					id = hfe.5091
				}
			}
			hfe.5091.step2 = {
				remove_country_flag = hfe.5091.step2
				set_country_flag = hfe.5091.step3
				country_event = {
					id = hfe.5091
				}
			}
			hfe.5091.step3 = {
				remove_country_flag = hfe.5091.step3
			}
		}
	}
}

# varelse fleet event
# for fleet
hfe_effect_varelse_fleet_attack_home_of_light = {
	clear_fleet_actions = this
	clear_orders = yes
	set_fleet_stance = aggressive
	# maybe reconsider
	random_galaxy_planet = {
		limit = {
			has_planet_flag = hfe_home_of_light
		}
		save_event_target_as = hfe_varelse_fleet_attack_home_of_light
	}
	auto_move_to_planet = {
		target = event_target:hfe_varelse_fleet_attack_home_of_light
		clear_auto_move_on_arrival = yes
		arrival_effect = hfe_effect_varelse_fleet_attack_home_of_light_make_hostile
	}
}

hfe_effect_varelse_fleet_attack_home_of_light_make_hostile = {
	owner = {
		set_faction_hostility = {
			set_hostile = yes
		}
	}
}

# need fleet event
hfe_effect_varelse_fleet_find_new_home = {
	clear_fleet_actions = this
	clear_orders = yes
	closest_system = {
		limit = {
			or = {
				not = {
					exists = owner
				}
				owner = {
					is_country_type = hfe_pirate
				}
			}
			hfe_trigger_pirate_fleet_power_in_system_check = yes
			# TODO with current settings fleet doesnt have guardian as hostile, maybe try to fix from what side
			not = {
				any_fleet_in_system = {
					exists = owner
					owner = {
						is_guardian_country = yes
					}
				}
			}
			any_system_planet = {
				or = {
					not = {
						exists = owner
					}
					owner = {
						is_country_type = primitive
					}
				}
				hfe_trigger_holy_planet = no
				habitability = {
					who = event_target:hfe_varelse_species
					value > 0.7
				}
			}
		}
		random_system_planet = {
			limit = {
				or = {
					not = {
						exists = owner
					}
					owner = {
						is_country_type = primitive
					}
				}
				hfe_trigger_holy_planet = no
				habitability = {
					who = event_target:hfe_varelse_species
					value > 0.7
				}
			}
			save_event_target_as = hfe_varelse_fleet_new_home
		}
	}
	if = {
		limit = {
			not = {
				exists = event_target:hfe_varelse_fleet_new_home
			}
		}
		closest_system = {
			limit = {
				hfe_trigger_pirate_fleet_power_in_system_check = yes
				# TODO with current settings fleet doesnt have guardian as hostile, maybe try to fix from what side
				not = {
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_guardian_country = yes
						}
					}
				}
				any_system_planet = {
					nand = {
						exists = owner
						owner = {
							has_country_flag = hfe_has_event_52
						}
					}
					hfe_trigger_holy_planet = no
					habitability = {
						who = event_target:hfe_varelse_species
						value > 0.5
					}
				}
			}
			random_system_planet = {
				limit = {
					nand = {
						exists = owner
						owner = {
							has_country_flag = hfe_has_event_52
						}
					}
					hfe_trigger_holy_planet = no
					habitability = {
						who = event_target:hfe_varelse_species
						value > 0.5
					}
				}
				save_event_target_as = hfe_varelse_fleet_new_home
			}
		}
	}
	if = {
		limit = {
			not = {
				exists = event_target:hfe_varelse_fleet_new_home
			}
		}
		hfe_effect_varelse_fleet_attack_home_of_light = yes
	}
	else = {
		auto_move_to_planet = {
			target = event_target:hfe_varelse_fleet_new_home
			clear_auto_move_on_arrival = no
			arrival_effect = hfe_effect_varelse_fleet_find_new_home_make_colony
		}
	}
}

hfe_effect_varelse_fleet_find_new_home_make_colony = {
	from = {
		create_country = {
			name = "New Varelse Hegemony"
			type = default
			species = event_target:hfe_varelse_species
			origin = hfe_origin_features_exodus
			ethos = {
				ethic = ethic_xenophobe
				ethic = ethic_militarist
				ethic = ethic_materialist
			}
			authority = auth_dictatorial
			effect = {
				random_country = {
					limit = {
						has_country_flag = hfe_has_event_52
					}
					establish_communications_no_message = prev
					prev = {
						add_opinion_modifier = {
							who = prev
							modifier = hfe_opinion_varelse_saved_from_time_trap
						}
					}
				}
				set_country_flag = hfe_was_government_in_exile
				set_country_flag = hfe_chosen_to_exodus
				set_country_flag = hfe_varelse
				# to recalc personality
				change_government = {
					authority = auth_imperial
				}
				change_government = {
					authority = auth_dictatorial
				}
				hfe_effect_resource_bonus = yes
				hfe_effect_init_give_tech_t3 = yes
				prev = {
					if = {
						limit = {
							exists = owner
						}
						# conquer = prev
						set_owner = prev
					}
					else = {
						create_colony = {
							owner = prev
						}
					}
				}
				# transfer fleet
				prevprev = {
					set_owner = prev
				}
				every_owned_ship = {
					repair_ship = yes
					add_modifier = {
						modifier = hfe_unkeep
					}
				}
			}
		}
		while = {
			count = 6
			create_pop = {
				species = owner
			}
		}
		add_modifier = {
			modifier = hfe_population_boom
			years = 10
		}
		add_modifier = {
			modifier = hfe_idustrial_boom
			years = 1
		}
		hfe_effect_create_starbase_citadel_from_planet = yes
		#		log = "Surprise Varelse fleet settled down"
	}
}

# for country return 6 event targets
hfe_effect_save_event_target = {
	if = {
		limit = {
			exists = event_target:hfe_event_target_5
		}
	}
	else_if = {
		limit = {
			not = {
				exists = event_target:hfe_event_target_0
			}
		}
		save_event_target_as = hfe_event_target_0
	}
	else_if = {
		limit = {
			nor = {
				is_same_value = event_target:hfe_event_target_0
				exists = event_target:hfe_event_target_1
			}
		}
		save_event_target_as = hfe_event_target_1
	}
	else_if = {
		limit = {
			nor = {
				is_same_value = event_target:hfe_event_target_0
				is_same_value = event_target:hfe_event_target_1
				exists = event_target:hfe_event_target_2
			}
		}
		save_event_target_as = hfe_event_target_2
	}
	else_if = {
		limit = {
			nor = {
				is_same_value = event_target:hfe_event_target_0
				is_same_value = event_target:hfe_event_target_1
				is_same_value = event_target:hfe_event_target_2
				exists = event_target:hfe_event_target_3
			}
		}
		save_event_target_as = hfe_event_target_3
	}
	else_if = {
		limit = {
			nor = {
				is_same_value = event_target:hfe_event_target_0
				is_same_value = event_target:hfe_event_target_1
				is_same_value = event_target:hfe_event_target_2
				is_same_value = event_target:hfe_event_target_3
				exists = event_target:hfe_event_target_4
			}
		}
		save_event_target_as = hfe_event_target_4
	}
	else_if = {
		limit = {
			nor = {
				is_same_value = event_target:hfe_event_target_0
				is_same_value = event_target:hfe_event_target_1
				is_same_value = event_target:hfe_event_target_2
				is_same_value = event_target:hfe_event_target_3
				is_same_value = event_target:hfe_event_target_4
				exists = event_target:hfe_event_target_5
			}
		}
		save_event_target_as = hfe_event_target_5
	}
}

# for country
hfe_effect_create_admirals = {
	while = {
		count = 5
		create_leader = {
			class = commander
			species = this
			skill = 5
			leader_age_min = 100
			leader_age_max = 300
		}
	}
}

hfe_effect_create_fleet = {
	hfe_effect_create_admirals = yes
	add_modifier = {
		modifier = hfe_space_boom
		years = 10
	}
	add_modifier = {
		modifier = hfe_navy_size
		years = 200
	}
	add_resource = {
		alloys = 100000
	}
}

# ai can trade anyway, so ammount doesnt matter
hfe_effect_resource_bonus = {
	add_resource = {
		energy = 5000
		minerals = 5000
		food = 5000
		alloys = 5000
		consumer_goods = 5000
		influence = 500
	}
}

hfe_effect_set_mineral_orbital_deposit = {
	random_list = {
		10 = {
			set_deposit = d_minerals_1
		}
		10 = {
			set_deposit = d_minerals_2
		}
		10 = {
			set_deposit = d_minerals_3
		}
		10 = {
			set_deposit = d_minerals_4
		}
		10 = {
			set_deposit = d_minerals_5
		}
		10 = {
			set_deposit = d_minerals_6
		}
		10 = {
			set_deposit = d_minerals_7
		}
		10 = {
			set_deposit = d_minerals_8
		}
		10 = {
			set_deposit = d_minerals_9
		}
		10 = {
			set_deposit = d_minerals_10
		}
	}
}

hfe_effect_set_energy_orbital_deposit = {
	random_list = {
		10 = {
			set_deposit = d_energy_1
		}
		10 = {
			set_deposit = d_energy_2
		}
		10 = {
			set_deposit = d_energy_3
		}
		10 = {
			set_deposit = d_energy_4
		}
		10 = {
			set_deposit = d_energy_5
		}
		10 = {
			set_deposit = d_energy_6
		}
		10 = {
			set_deposit = d_energy_7
		}
		10 = {
			set_deposit = d_energy_8
		}
		10 = {
			set_deposit = d_energy_9
		}
		10 = {
			set_deposit = d_energy_10
		}
	}
}

# for leader
hfe_effect_add_psionic_trait = {
	# TODO revisit this
	# if = {
	# 	limit = {
	# 		nor = {
	# 			has_trait = leader_trait_psionic
	# 			has_trait = leader_trait_chosen
	# 		}
	# 	}
	# 	switch = {
	# 		trigger = leader_class
	# 		admiral = {
	# 			add_trait = leader_trait_psionic
	# 		}
	# 		general = {
	# 			add_trait = leader_trait_psionic
	# 		}
	# 		governor = {
	# 			add_trait = leader_trait_psionic
	# 		}
	# 		scientist = {
	# 			add_trait = leader_trait_psionic
	# 		}
	# 		ruler = {
	# 			add_trait = leader_trait_psionic
	# 		}
	# 	}
	# }
}

# for system
hfe_effect_create_starbase = {
	if = {
		limit = {
			exists = starbase
		}
		starbase = {
			set_owner = event_target:hfe_starbase_owner
		}
	}
	else = {
		create_starbase = {
			size = starbase_outpost
			owner = event_target:hfe_starbase_owner
		}
	}
}

# for planet
hfe_effect_create_starbase_outpost_from_planet = {
	owner = {
		save_event_target_as = hfe_starbase_owner
	}
	solar_system = {
		hfe_effect_create_starbase = yes
	}
}

hfe_effect_create_starbase_starport_from_planet = {
	owner = {
		save_event_target_as = hfe_starbase_owner
	}
	solar_system = {
		hfe_effect_create_starbase = yes
		starbase = {
			set_starbase_size = starbase_starport
		}
	}
}

hfe_effect_create_starbase_starhold_from_planet = {
	owner = {
		save_event_target_as = hfe_starbase_owner
	}
	solar_system = {
		hfe_effect_create_starbase = yes
		starbase = {
			set_starbase_size = starbase_starhold
		}
	}
}

hfe_effect_create_starbase_starfortress_from_planet = {
	owner = {
		save_event_target_as = hfe_starbase_owner
	}
	solar_system = {
		hfe_effect_create_starbase = yes
		starbase = {
			set_starbase_size = starbase_starfortress
		}
	}
}

hfe_effect_create_starbase_citadel_from_planet = {
	owner = {
		save_event_target_as = hfe_starbase_owner
	}
	solar_system = {
		hfe_effect_create_starbase = yes
		starbase = {
			set_starbase_size = starbase_citadel
		}
	}
}

hfe_effect_create_starbase_citadel_with_buildings_from_planet = {
	owner = {
		save_event_target_as = hfe_starbase_owner
	}
	solar_system = {
		create_starbase = {
			size = starbase_citadel
			owner = event_target:hfe_starbase_owner
		}
	}
}

hfe_effect_starbase_add_shipyard_0 = {
	starbase = {
		set_starbase_module = {
			slot = 1
			module = shipyard
		}
	}
}

# for starbase
hfe_effect_create_starbase_upgrade = {
	owner = {
		switch = {
			trigger = has_technology
			tech_starbase_5 = {
				prev = {
					set_starbase_size = starbase_citadel
				}
			}
			tech_starbase_4 = {
				prev = {
					set_starbase_size = starbase_starfortress
				}
			}
			tech_starbase_3 = {
				prev = {
					set_starbase_size = starbase_starhold
				}
			}
			tech_starbase_2 = {
				prev = {
					set_starbase_size = starbase_starport
				}
			}
		}
	}
}

# for solar system
hfe_effect_add_hyperlanes = {
	while = {
		count = 3
		random_system = {
			limit = {
				nor = {
					has_hyperlane_to = prev
					is_same_value = prev
				}
				distance = {
					source = prev
					type = euclidean
					min_distance >= 0
					max_distance <= 20
					use_bypasses = no
				}
				any_system = {
					has_hyperlane_to = prev
				}
			}
			add_hyperlane = {
				from = prev
				to = this
			}
		}
	}
	if = {
		limit = {
			not = {
				any_system = {
					has_hyperlane_to = prev
				}
			}
		}
		random_system = {
			limit = {
				not = {
					is_same_value = prev
				}
				distance = {
					source = prev
					type = euclidean
					min_distance >= 0
					max_distance <= 50
					use_bypasses = no
				}
			}
			add_hyperlane = {
				from = prev
				to = this
			}
		}
	}
}

hfe_effect_create_signal_object_for_planet = {
	create_ambient_object = {
		type = hfe_object_signal
		entity_offset_height = {
			min = -15
			max = -15
		}
	}
	last_created_ambient_object = {
		set_ambient_object_flag = hfe_signal_object
		set_ambient_object_flag = hfe_signal_object@prev
		set_location = {
			target = prev
			distance = 0
			angle = 0
		}
	}
}

hfe_effect_create_signal_object = {
	create_ambient_object = {
		type = hfe_object_signal
	}
	last_created_ambient_object = {
		set_ambient_object_flag = hfe_signal_object
		set_ambient_object_flag = hfe_signal_object@prev
		set_location = {
			target = prev
			distance = 0
			angle = 0
		}
	}
}

hfe_effect_remove_signal_object_from_this = {
	solar_system = {
		every_system_ambient_object = {
			limit = {
				has_ambient_object_flag = hfe_signal_object@prevprev
			}
			destroy_ambient_object = this
		}
	}
}

hfe_effect_remove_all_signal_object = {
	solar_system = {
		every_system_ambient_object = {
			limit = {
				has_ambient_object_flag = hfe_signal_object
			}
			destroy_ambient_object = this
		}
	}
}

hfe_effect_clear_buildings_and_destroy_colony = {
	remove_all_buildings = yes
	destroy_colony = yes
}

hfe_effect_random_roll_flags_2_country = {
	remove_country_flag = hfe_random_0
	remove_country_flag = hfe_random_1
	random_list = {
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_0
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_1
				days = 1
			}
		}
	}
}

hfe_effect_random_roll_flags_3_country = {
	remove_country_flag = hfe_random_0
	remove_country_flag = hfe_random_1
	remove_country_flag = hfe_random_2
	random_list = {
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_0
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_1
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_2
				days = 1
			}
		}
	}
}

hfe_effect_random_roll_flags_4_country = {
	remove_country_flag = hfe_random_0
	remove_country_flag = hfe_random_1
	remove_country_flag = hfe_random_2
	remove_country_flag = hfe_random_3
	random_list = {
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_0
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_1
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_2
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_3
				days = 1
			}
		}
	}
}

hfe_effect_random_roll_flags_5_country = {
	remove_country_flag = hfe_random_0
	remove_country_flag = hfe_random_1
	remove_country_flag = hfe_random_2
	remove_country_flag = hfe_random_3
	remove_country_flag = hfe_random_4
	random_list = {
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_0
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_1
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_2
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_3
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_4
				days = 1
			}
		}
	}
}

hfe_effect_random_roll_flags_6_country = {
	remove_country_flag = hfe_random_0
	remove_country_flag = hfe_random_1
	remove_country_flag = hfe_random_2
	remove_country_flag = hfe_random_3
	remove_country_flag = hfe_random_4
	remove_country_flag = hfe_random_5
	random_list = {
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_0
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_1
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_2
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_3
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_4
				days = 1
			}
		}
		10 = {
			set_timed_country_flag = {
				flag = hfe_random_5
				days = 1
			}
		}
	}
}

hfe_effect_root_this_change_pc_to_ideal = {
	change_pc = rl_habitable_normal
	root = {
		switch = {
			trigger = ideal_planet_class
			pc_desert = {
				prev = {
					change_pc = pc_desert
				}
			}
			pc_tropical = {
				prev = {
					change_pc = pc_tropical
				}
			}
			pc_arid = {
				prev = {
					change_pc = pc_arid
				}
			}
			pc_continental = {
				prev = {
					change_pc = pc_continental
				}
			}
			pc_ocean = {
				prev = {
					change_pc = pc_ocean
				}
			}
			pc_tundra = {
				prev = {
					change_pc = pc_tundra
				}
			}
			pc_arctic = {
				prev = {
					change_pc = pc_arctic
				}
			}
			pc_alpine = {
				prev = {
					change_pc = pc_alpine
				}
			}
			pc_savannah = {
				prev = {
					change_pc = pc_savannah
				}
			}
			pc_gaia = {
				prev = {
					change_pc = pc_gaia
				}
			}
			pc_nuked = {
				prev = {
					change_pc = pc_nuked
				}
			}
		}
	}
	reroll_planet = yes
}

hfe_effect_leader_add_exp_100 = {
	if = {
		limit = {
			exists = leader
		}
		leader = {
			add_experience = 100
		}
	}
	#	else = {
	#		log = "ERROR: EXP gaining leader not exists"
	#	}
}

hfe_effect_leader_add_exp_200 = {
	if = {
		limit = {
			exists = leader
		}
		leader = {
			add_experience = 200
		}
	}
	#	else = {
	#		log = "ERROR: EXP gaining leader not exists"
	#	}
}

hfe_effect_this_make_overlord_of_prev = {
	prev = {
		if = {
			limit = {
				exists = federation
			}
			leave_alliance = {
				override_requirements = yes
			}
		}
	}
	if = {
		limit = {
			is_country_type = awakened_fallen_empire
		}
		if = {
			limit = {
				is_xenophile = yes
			}
			prev = {
				set_subject_of = {
					who = prev
					preset = preset_signatory
				}
			}
		}
		else_if = {
			limit = {
				is_xenophobe = yes
			}
			prev = {
				set_subject_of = {
					who = prev
					preset = preset_thrall
				}
			}
		}
		else_if = {
			limit = {
				is_spiritualist = yes
			}
			prev = {
				set_subject_of = {
					who = prev
					preset = preset_dominion
				}
			}
		}
		else_if = {
			limit = {
				is_materialist = yes
			}
			prev = {
				set_subject_of = {
					who = prev
					preset = preset_satellite
				}
			}
		}
	}
	else_if = {
		limit = {
			exists = event_target:hfe_coalition_leader
			is_country = event_target:hfe_coalition_leader
		}
		prev = {
			set_subject_of = {
				who = prev
			}
			hfe_effect_advisor_future_on = yes
		}
	}
	else_if = {
		limit = {
			exists = event_target:hfe_egypt_country
			is_country = event_target:hfe_egypt_country
		}
		prev = {
			set_subject_of = {
				who = prev
			}
		}
	}
	else = {
		prev = {
			set_subject_of = {
				who = prev
				preset = preset_vassal
			}
		}
	}
}

# for country
hfe_effect_advisor_future_on = {
	hidden_effect = {
		if = {
			limit = {
				is_ai = no
				not = {
					has_global_flag = hfe_advisor_future_on
				}
			}
			set_global_flag = hfe_advisor_future_on
			custom_tooltip = hfe_advisor_future_on
			# LOL
			# TODO check if still need it
			random_playable_country = {
				limit = {
					is_ai = yes
				}
				set_player = prev
				prev = {
					set_player = prev
				}
			}
		}
		#		log = "FINALLY GOT THAT FRICKING ADVISOR"
	}
}

# need root.species
hfe_effect_remove_prescripted_ideal = {
	while = {
		count = 3
		closest_system = {
			limit = {
				any_system_planet = {
					not = {
						exists = owner
					}
					habitable_planet = yes
					habitability = {
						who = root.species
						value > 0.2
					}
				}
			}
			max_steps = 3
			random_system_planet = {
				limit = {
					not = {
						exists = owner
					}
					habitability = {
						who = root.species
						value > 0.2
					}
				}
				change_pc = pc_broken
				hfe_effect_set_mineral_orbital_deposit = yes
			}
		}
	}
}

hfe_effect_stargate_on = {
	event_target:hfe_stargate = {
		create_ambient_object = {
			type = hfe_object_stargate_1
			location = this
		}
		last_created_ambient_object = {
			save_event_target_as = hfe_stargate
		}
		destroy_ambient_object = this
		#		if = {
		#			limit = { has_global_flag = HFE_TSP_spawn_test }
		#			log = "Star Gate activated"
		#		}
	}
}

hfe_effect_stargate_off = {
	event_target:hfe_stargate = {
		create_ambient_object = {
			type = hfe_object_stargate_0
			location = this
		}
		last_created_ambient_object = {
			save_event_target_as = hfe_stargate
		}
		destroy_ambient_object = this
		#		if = {
		#			limit = { has_global_flag = HFE_TSP_spawn_test }
		#			log = "Star Gate shut down"
		#		}
	}
}

hfe_effect_stargate_add = {
	create_ambient_object = {
		type = hfe_object_stargate_0
		location = event_target:hfe_stargate_planet
	}
	last_created_ambient_object = {
		save_event_target_as = hfe_stargate
	}
	#	if = {
	#		limit = { has_global_flag = HFE_TSP_spawn_test }
	#		log = "Star Gate spawned"
	#	}
}

hfe_effect_stargate_remove = {
	destroy_ambient_object = event_target:hfe_stargate
	#	if = {
	#		limit = { has_global_flag = HFE_TSP_spawn_test }
	#		log = "Star Gate terminated"
	#	}
}

# give tech option
hfe_effect_give_random_tech = {
	add_random_research_option = {
		tier = 1
		add_progress = 1
		fail_effects = {
			add_random_research_option = {
				tier = 2
				add_progress = 1
				fail_effects = {
					add_random_research_option = {
						tier = 3
						add_progress = 1
						fail_effects = {
							add_random_research_option = {
								tier = 4
								add_progress = 1
								fail_effects = {
									add_random_research_option = {
										tier = 5
										add_progress = 1
									}
								}
							}
						}
					}
				}
			}
		}
	}
}

hfe_effect_create_crystal_fleet = {
	random_list = {
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_green
				days = 1
			}
		}
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_blue
				days = 1
			}
		}
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_yellow
				days = 1
			}
		}
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_red
				days = 1
			}
		}
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_green_elite
				days = 1
			}
		}
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_blue_elite
				days = 1
			}
		}
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_yellow_elite
				days = 1
			}
		}
		10 = {
			set_timed_fleet_flag = {
				flag = hfe_crystal_fleet_red_elite
				days = 1
			}
		}
	}
	# large
	while = {
		count = 10
		random_list = {
			# nothing
			50 = {
				# at least 1 ship in fleet
				modifier = {
					factor = 0
					num_ships = 0
				}
			}
			10 = {
				modifier = {
					factor = value:hfe_script_value_difficulty_scale
				}
				if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_green
					}
					create_ship = {
						name = "Your Mother"
						design = "hfe_NAME_Large_Crystal_Entity_Green"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_blue
					}
					create_ship = {
						name = "Zoo We Momma"
						design = "hfe_NAME_Large_Crystal_Entity_Blue"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_yellow
					}
					create_ship = {
						name = "All the Gold In California"
						design = "hfe_NAME_Large_Crystal_Entity_Yellow"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_red
					}
					create_ship = {
						name = "Motherlode"
						design = "hfe_NAME_Large_Crystal_Entity_Red"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_green_elite
					}
					create_ship = {
						name = "OH WORM IT'S COMIN'"
						design = "hfe_NAME_Large_Crystal_Entity_Green_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_blue_elite
					}
					create_ship = {
						name = "BIG BOI"
						design = "hfe_NAME_Large_Crystal_Entity_Blue_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_yellow_elite
					}
					create_ship = {
						name = "BIG BERTHA"
						design = "hfe_NAME_Large_Crystal_Entity_Yellow_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_red_elite
					}
					create_ship = {
						name = "Absolute Unit"
						design = "hfe_NAME_Large_Crystal_Entity_Red_Elite"
					}
				}
			}
		}
	}
	# medium
	while = {
		count = 20
		random_list = {
			# nothing
			50 = {
			}
			10 = {
				modifier = {
					factor = value:hfe_script_value_difficulty_scale
				}
				if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_green
					}
					create_ship = {
						name = "Hecking Chonker"
						design = "hfe_NAME_Medium_Crystal_Entity_Green"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_blue
					}
					create_ship = {
						name = "Hecking Chonker"
						design = "hfe_NAME_Medium_Crystal_Entity_Blue"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_yellow
					}
					create_ship = {
						name = "Hecking Chonker"
						design = "hfe_NAME_Medium_Crystal_Entity_Yellow"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_red
					}
					create_ship = {
						name = "Hecking Chonker"
						design = "hfe_NAME_Medium_Crystal_Entity_Red"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_green_elite
					}
					create_ship = {
						name = "TurtleShroom's Waistline"
						design = "hfe_NAME_Medium_Crystal_Entity_Green_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_blue_elite
					}
					create_ship = {
						name = "Son of the Big Boy"
						design = "hfe_NAME_Medium_Crystal_Entity_Blue_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_yellow_elite
					}
					create_ship = {
						name = "Son of Big Bertha"
						design = "hfe_NAME_Medium_Crystal_Entity_Yellow_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_red_elite
					}
					create_ship = {
						name = "Son of an Absolute Unit"
						design = "hfe_NAME_Medium_Crystal_Entity_Red_Elite"
					}
				}
			}
		}
	}
	# small
	while = {
		count = 40
		random_list = {
			# nothing
			50 = {
			}
			10 = {
				modifier = {
					factor = value:hfe_script_value_difficulty_scale
				}
				if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_green
					}
					create_ship = {
						name = "Li'l Emerald"
						design = "hfe_NAME_Small_Crystal_Entity_Green"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_blue
					}
					create_ship = {
						name = "Sapphire Sweetie"
						design = "hfe_NAME_Small_Crystal_Entity_Blue"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_yellow
					}
					create_ship = {
						name = "Topaz Buddy"
						design = "hfe_NAME_Small_Crystal_Entity_Yellow"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_red
					}
					create_ship = {
						name = "Rocky the Ruby"
						design = "hfe_NAME_Small_Crystal_Entity_Red"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_green_elite
					}
					create_ship = {
						name = "Straight Out'ta Flavor Town"
						design = "hfe_NAME_Small_Crystal_Entity_Green_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_blue_elite
					}
					create_ship = {
						name = "Martha Stewart Did Nothing Wrong"
						design = "hfe_NAME_Small_Crystal_Entity_Blue_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_yellow_elite
					}
					create_ship = {
						name = "Dragons Guard the Rubricon"
						design = "hfe_NAME_Small_Crystal_Entity_Yellow_Elite"
					}
				}
				else_if = {
					limit = {
						has_fleet_flag = hfe_crystal_fleet_red_elite
					}
					create_ship = {
						name = "Had's Pet Rock"
						design = "hfe_NAME_Small_Crystal_Entity_Red_Elite"
					}
				}
			}
		}
	}
}

hfe_effect_get_space_monster_country = {
	if = {
		limit = {
			exists = event_target:hfe_global_space_monster
		}
	}
	else = {
		create_country = {
			type = hfe_berserk
			name = "Butt Hurt Crystals"
			effect = {
				save_global_event_target_as = hfe_global_space_monster
				#				if = {
				#					limit = { has_global_flag = HFE_TSP_spawn_test }
				#					log = "Butt Hurt Crystals spawned"
				#				}
			}
		}
	}
}

hfe_effect_spawn_space_monster = {
	random_system_planet = {
		while = {
			count = 5
			random_list = {
				10 = {
					#					if = {
					#						limit = { has_global_flag = HFE_TSP_spawn_test }
					#						log = "Butt Hurt Crystals disbanded"
					#					}
				}
				10 = {
					#					if = {
					#						limit = { has_global_flag = HFE_TSP_spawn_test }
					#						log = "Butt Hurt Crystals spanwed"
					#					}
					hfe_effect_get_space_monster_country = yes
					# some crystals
					create_fleet = {
						name = "Butt Hurt Crystals"
						effect = {
							hfe_effect_create_crystal_fleet = yes
							set_owner = event_target:hfe_global_space_monster
							set_fleet_stance = aggressive
							set_location = {
								target = prev
								distance = 45
								angle = random
							}
						}
					}
					# add other types later
				}
			}
		}
	}
}

# country scope
hfe_effect_transfer_resources_from_root_to_this = {
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = energy
					value >= 100
				}
			}
		}
		root = {
			add_resource = {
				energy = -100
			}
		}
		add_resource = {
			energy = 100
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = minerals
					value >= 100
				}
			}
		}
		root = {
			add_resource = {
				minerals = -100
			}
		}
		add_resource = {
			minerals = 100
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = food
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				food = -10
			}
		}
		add_resource = {
			food = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = alloys
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				alloys = -10
			}
		}
		add_resource = {
			alloys = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = consumer_goods
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				consumer_goods = -10
			}
		}
		add_resource = {
			consumer_goods = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = volatile_motes
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				volatile_motes = -10
			}
		}
		add_resource = {
			volatile_motes = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = exotic_gases
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				exotic_gases = -10
			}
		}
		add_resource = {
			exotic_gases = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = rare_crystals
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				rare_crystals = -10
			}
		}
		add_resource = {
			rare_crystals = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = sr_living_metal
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				sr_living_metal = -10
			}
		}
		add_resource = {
			sr_living_metal = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = sr_zro
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				sr_zro = -10
			}
		}
		add_resource = {
			sr_zro = 10
		}
	}
	while = {
		limit = {
			root = {
				resource_stockpile_compare = {
					resource = sr_dark_matter
					value >= 10
				}
			}
		}
		root = {
			add_resource = {
				sr_dark_matter = -10
			}
		}
		add_resource = {
			sr_dark_matter = 10
		}
	}
}

hfe_effect_add_cyborg_trait = {
	if = {
		limit = {
			leader_class = commander
		}
		add_trait = leader_trait_cyborg
		add_trait = leader_trait_cyborg
	}
	else_if = {
		limit = {
			leader_class = commander
		}
		add_trait = leader_trait_cyborg
		add_trait = leader_trait_cyborg
	}
	else_if = {
		limit = {
			leader_class = official
		}
		add_trait = leader_trait_cyborg
		add_trait = leader_trait_cyborg
	}
	else_if = {
		limit = {
			leader_class = scientist
		}
		add_trait = leader_trait_cyborg
		add_trait = leader_trait_cyborg
	}
	else_if = {
		limit = {
			is_ruler = yes
		}
		add_trait = leader_trait_cyborg
		add_trait = leader_trait_cyborg
	}
}

# for fleet
hfe_effect_add_cyborg_trait_to_leader = {
	if = {
		limit = {
			exists = leader
		}
		leader = {
			set_owner = prev.owner
			hfe_effect_add_cyborg_trait = yes
		}
	}
}

hfe_effect_ruin_megastructure = {
	if = {
		limit = {
			OR = {
				is_megastructure_type = spy_orb_1
				is_megastructure_type = spy_orb_2
				is_megastructure_type = spy_orb_3
				is_megastructure_type = spy_orb_4
				is_megastructure_type = spy_orb_restored
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = spy_orb_ruined
				coords_from = prev
			}
		}
		remove_megastructure = this
	}
	else_if = {
		limit = {
			OR = {
				is_megastructure_type = think_tank_1
				is_megastructure_type = think_tank_2
				is_megastructure_type = think_tank_3
				is_megastructure_type = think_tank_4
				is_megastructure_type = think_tank_restored
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = think_tank_ruined
				coords_from = prev
			}
		}
		remove_megastructure = this
	}
	else_if = {
		limit = {
			OR = {
				is_megastructure_type = strategic_coordination_center_1
				is_megastructure_type = strategic_coordination_center_2
				is_megastructure_type = strategic_coordination_center_3
				is_megastructure_type = strategic_coordination_center_restored
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = strategic_coordination_center_ruined
				coords_from = prev
			}
		}
		remove_megastructure = this
	}
	else_if = {
		limit = {
			OR = {
				is_megastructure_type = mega_art_installation_1
				is_megastructure_type = mega_art_installation_2
				is_megastructure_type = mega_art_installation_3
				is_megastructure_type = mega_art_installation_4
				is_megastructure_type = mega_art_installation_restored
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = mega_art_installation_ruined
				coords_from = prev
			}
		}
		remove_megastructure = this
	}
	else_if = {
		limit = {
			OR = {
				is_megastructure_type = interstellar_assembly_1
				is_megastructure_type = interstellar_assembly_2
				is_megastructure_type = interstellar_assembly_3
				is_megastructure_type = interstellar_assembly_4
				is_megastructure_type = interstellar_assembly_restored
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = interstellar_assembly_ruined
				coords_from = prev
			}
		}
		remove_megastructure = this
	}
	else_if = {
		limit = {
			OR = {
				is_megastructure_type = mega_shipyard_1
				is_megastructure_type = mega_shipyard_2
				is_megastructure_type = mega_shipyard_3
				is_megastructure_type = mega_shipyard_restored
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = mega_shipyard_ruined
				coords_from = prev
			}
		}
		remove_megastructure = this
	}
	else_if = {
		limit = {
			OR = {
				is_megastructure_type = matter_decompressor_1
				is_megastructure_type = matter_decompressor_2
				is_megastructure_type = matter_decompressor_3
				is_megastructure_type = matter_decompressor_4
				is_megastructure_type = matter_decompressor_restored
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = matter_decompressor_ruined
				coords_from = prev
			}
		}
		remove_megastructure = this
	}
}
