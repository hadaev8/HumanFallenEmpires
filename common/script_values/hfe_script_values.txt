# hfe_system_fleets_power = {
# 	base = 0
# 	complex_trigger_modifier = {
# 		trigger = any_fleet_in_system
# 		trigger_scope = fleet
# 		parameters = {
# 			exists = owner
# 			owner = {
# 				is_hostile = root.owner
# 			}
# 		}
# 		potential = {
# 			solar_system = {
# 				any_system_colony = {
# 					NOT = {
# 						is_same_value = prevprev
# 					}
# 					planet_stability >= @stabilitylevel3
# 					num_pops > 5
# 				}
# 			}
# 		}
# 		desc = STRING_LOYAL_PLANETS_IN_SYSTEM
# 		mode = subtract
# 		mult = 2
# 	}
# 	modifier = {
# 		set = 1
# 		trigger:fleet_power
# 	}
# 	modifier = {
# 		factor = 2
# 		or = {
# 			is_country_type = default
# 			is_country_type = hfe_pirate
# 			is_country_type = hfe_drone
# 		}
# 		controlled_systems > 3
# 		years_passed < 100
# 	}
# }
# planet scope
hfe_script_value_capital_lvl = {
	base = 0
	modifier = {
		add = 1
		has_upgraded_capital = yes
	}
	modifier = {
		add = 1
		has_major_upgraded_capital = yes
	}
	modifier = {
		add = 1
		has_fully_upgraded_capital = yes
	}
}

hfe_script_value_years_passed_1_to = {
	add = trigger:years_passed
	[[hfe_scale]
	mult = $hfe_scale$
	]
	[[!hfe_scale]
	mult = 0.1
	]
	round = yes
	min = 1
	[[hfe_max]
	max = $hfe_max$
	]
}

hfe_script_value_difficulty_twice_scale = {
	base = 1
	add = trigger:is_difficulty
	# from 0 to 6 in current vanilla
	divide = 7
	add = 1
}

hfe_script_value_difficulty_scale = {
	base = 1
	add = trigger:is_difficulty
}

# 2**16 is fine, kind of accurate at 2**-6, on 2**-8 difference with right answer is 0,93
# 2**-6 * 2**-6 is kind of ok
hfe_script_value_pow_2 = {
	base = 2
	pow = $hfe_val$
	# add rounding optional arg for discovery costs
}

# its sound like i cant pass script value with args as script value arg
# hfe_script_value_mult = {
# 	set = $hfe_number$
# 	[[!hfe_scale]
# 	mult = $hfe_scale$
# 	]
# }
# free jobs only can be positive it seems
hfe_script_value_free_jobs = {
	add = trigger:free_jobs
	# just in case
	min = 0
	subtract = trigger:num_unemployed
	mult = 0.5
	max = 6
	min = -6
}

hfe_script_value_free_housing = {
	add = trigger:free_housing
	# its easy to get free housing, so reduce its relative importance
	mult = 0.25
	# prevent overflow
	max = 6
	min = -6
}

hfe_script_value_job_weights_army_modifier = {
	add = modifier:army_defense_damage_mult
	add = modifier:army_damage_mult
	# in vanilla very strong trait gives 0.4 damage and have x2 weight
	mult = 2.5
	# 2 ** (0.4*2.5) = 2
}

hfe_script_value_weight_num_planets_with_deposit_in_system = {
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				has_deposit = yes
			}
		}
		mode = add
	}
	mult = 5
	min = 1
}

hfe_script_value_weight_trust = {
	complex_trigger_modifier = {
		trigger = trust
		parameters = {
			who = prev
		}
		mode = add
	}
	divide = 10
	min = 1
}

hfe_script_value_opinion = {
	complex_trigger_modifier = {
		trigger_scope = $country0$
		trigger = opinion
		parameters = {
			who = $country1$
		}
		mode = add
	}
}

# less weight if country1 weakier
hfe_script_value_weight_relative_fleet_power = {
	base = 1
	modifier = {
		$country0$ = {
			relative_power = {
				who = $country1$
				value = overwhelming
				category = fleet
			}
		}
		mult = 4
	}
	modifier = {
		$country0$ = {
			relative_power = {
				who = $country1$
				value = superior
				category = fleet
			}
		}
		mult = 2
	}
	modifier = {
		$country0$ = {
			relative_power = {
				who = $country1$
				value = inferior
				category = fleet
			}
		}
		divide = 2
	}
	modifier = {
		$country0$ = {
			relative_power = {
				who = $country1$
				value = pathetic
				category = fleet
			}
		}
		divide = 4
	}
}

hfe_script_value_weight_opposing_ethics_divergence_reduce = {
	base = 1
	divide = value:hfe_script_value_weight_opposing_ethics_divergence|country|$country$|
}

hfe_script_value_weight_opposing_ethics_divergence = {
	complex_trigger_modifier = {
		trigger = opposing_ethics_divergence
		parameters = {
			who = $country$
		}
		mode = add
	}
	min = 1
}

hfe_script_value_count_owned_pop_exact_same_species = {
	complex_trigger_modifier = {
		trigger_scope = root
		trigger = count_owned_pop
		parameters = {
			limit = {
				# this pop, prev country, prevprev species or whatever value applied to
				is_exact_same_species = prevprev
			}
		}
		mode = add
	}
}

hfe_script_value_scale_for_every_thousand_in_stockpile = {
	complex_trigger_modifier = {
		trigger = resource_stockpile_compare
		parameters = {
			resource = $resource$
		}
		mode = add
	}
	divide = 1000
	floor = yes
}

hfe_script_value_mult_two_values = {
	set = $hfe_val0$
	mult = $hfe_val1$
}

hfe_script_value_pop_percentage_spiritualist = {
	complex_trigger_modifier = {
		trigger = pop_percentage
		parameters = {
			limit = {
				has_ethic = ethic_spiritualist
			}
		}
		mode = add
	}
}

hfe_script_value_scale_if_ruler = {
	base = 1
	modifier = {
		is_ruler = yes
		mult = $hfe_val$
	}
}

# copy past from vanilla with adding 3d resource
hfe_script_value_job_weights_triple_resources_modifier = {
	complex_trigger_modifier = {
		trigger = check_economic_production_modifier_for_job
		parameters = {
			job = $JOB$
			resource = {
				$RESOURCE1$ = $WEIGHT1$
				$RESOURCE2$ = $WEIGHT2$
				$RESOURCE3$ = $WEIGHT3$
			}
		}
		mode = add
	}
	add = value:job_weights_manual_corrections|JOB|$JOB$|
	add = 1
	min = 0
	pow = 3	#we need it to have a bit more impact
	modifier = {
		owner = {
			has_deficit = $RESOURCE1$
		}
		mult = @\[ 10 * $WEIGHT1$ ]
	}
	modifier = {
		owner = {
			has_deficit = $RESOURCE2$
		}
		mult = @\[ 10 * $WEIGHT2$ ]
	}
	modifier = {
		owner = {
			has_deficit = $RESOURCE3$
		}
		mult = @\[ 10 * $WEIGHT3$ ]
	}
}

hfe_script_value_resource_deposit_proxy = {
	complex_trigger_modifier = {
		trigger = count_deposit
		parameters = {
			limit = {
				has_resource = {
					type = $hfe_resource$
					amount = $hfe_amount$
				}
			}
		}
		mode = add
	}
	mult = $hfe_amount$
}

hfe_script_value_resource = {
	# oh my
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|1|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|2|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|3|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|4|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|5|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|6|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|7|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|8|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|9|
	add = value:hfe_script_value_resource_deposit_proxy|hfe_resource|$hfe_resource$|hfe_amount|10|
	mult = $hfe_mult$
}

hfe_script_value_arc_furnace_rating_planet = {
	add = value:hfe_script_value_resource|hfe_resource|minerals|hfe_mult|1|
	add = value:hfe_script_value_resource|hfe_resource|alloys|hfe_mult|2|
	add = value:hfe_script_value_resource|hfe_resource|volatile_motes|hfe_mult|4|
	add = value:hfe_script_value_resource|hfe_resource|exotic_gases|hfe_mult|4|
	add = value:hfe_script_value_resource|hfe_resource|rare_crystals|hfe_mult|4|
	add = value:hfe_script_value_resource|hfe_resource|sr_living_metal|hfe_mult|8|
}

hfe_script_value_science_rating = {
	add = value:hfe_script_value_resource|hfe_resource|physics_research|hfe_mult|4|
	add = value:hfe_script_value_resource|hfe_resource|society_research|hfe_mult|4|
	add = value:hfe_script_value_resource|hfe_resource|engineering_research|hfe_mult|4|
}

hfe_script_value_everything_rating = {
	add = value:hfe_script_value_science_rating
	add = value:hfe_script_value_resource|hfe_resource|energy|hfe_mult|1|
	add = value:hfe_script_value_resource|hfe_resource|minerals|hfe_mult|1|
	add = value:hfe_script_value_resource|hfe_resource|food|hfe_mult|1|
	add = value:hfe_script_value_resource|hfe_resource|consumer_goods|hfe_mult|2|
	add = value:hfe_script_value_resource|hfe_resource|alloys|hfe_mult|4|
	add = value:hfe_script_value_resource|hfe_resource|volatile_motes|hfe_mult|8|
	add = value:hfe_script_value_resource|hfe_resource|exotic_gases|hfe_mult|8|
	add = value:hfe_script_value_resource|hfe_resource|rare_crystals|hfe_mult|8|
	add = value:hfe_script_value_resource|hfe_resource|sr_living_metal|hfe_mult|16|
	add = value:hfe_script_value_resource|hfe_resource|sr_zro|hfe_mult|16|
	add = value:hfe_script_value_resource|hfe_resource|sr_dark_matter|hfe_mult|16|
	add = value:hfe_script_value_resource|hfe_resource|minor_artifacts|hfe_mult|32|
}

hfe_script_value_system_star_proxy = {
	add = system_star.$hfe_val$
}

hfe_script_value_worm_system_rating = {
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				NOR = {
					is_planet_class = pc_gas_giant
					is_planet_class = pc_shattered_ring_habitable
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_habitable_damaged
					is_planet_class = pc_ringworld_tech
					is_planet_class = pc_ringworld_tech_damaged
					is_planet_class = pc_ringworld_seam
					is_planet_class = pc_ringworld_seam_damaged
					is_planet_class = pc_habitat
					is_planet_class = pc_asteroid
					is_planet_class = pc_ice_asteroid
					is_planet_class = pc_city
					is_planet_class = pc_relic
					is_star = yes
				}
			}
		}
		mode = add
	}
}

hfe_script_value_habitat_planet_system_rating = {
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_star = no
				is_astral_scar = no
				NOR = {
					has_planet_flag = megastructure
					has_planet_flag = has_megastructure
					solar_system = {
						OR = {
							has_star_flag = ring_world_built
							has_star_flag = ithomes_gate
						}
					}
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_habitable_damaged
					is_planet_class = pc_ringworld_tech
					is_planet_class = pc_ringworld_tech_damaged
					is_planet_class = pc_ringworld_seam
					is_planet_class = pc_ringworld_seam_damaged
					is_planet_class = pc_habitat
					has_planet_flag = has_orbital_debris
				}
				OR = {
					is_asteroid = yes
					is_moon = yes
				}
			}
		}
		mult = 0.5
		mode = add
	}
	complex_trigger_modifier = {
		trigger = count_system_planet
		parameters = {
			limit = {
				is_star = no
				is_astral_scar = no
				NOR = {
					has_planet_flag = megastructure
					has_planet_flag = has_megastructure
					solar_system = {
						OR = {
							has_star_flag = ring_world_built
							has_star_flag = ithomes_gate
						}
					}
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_ringworld_habitable_damaged
					is_planet_class = pc_ringworld_tech
					is_planet_class = pc_ringworld_tech_damaged
					is_planet_class = pc_ringworld_seam
					is_planet_class = pc_ringworld_seam_damaged
					is_planet_class = pc_habitat
					has_planet_flag = has_orbital_debris
					is_asteroid = yes
					is_moon = yes
				}
			}
		}
		mode = add
	}
}

hfe_script_value_pop_percentage_with_trait = {
	complex_trigger_modifier = {
		trigger = pop_percentage
		parameters = {
			limit = {
				has_trait = $hfe_trait$
			}
		}
		mode = add
	}
}

hfe_script_value_pop_percentage_with_trait_weight = {
	set = value:hfe_script_value_pop_percentage_with_trait|hfe_trait|$hfe_trait$|
	add = -0.5
}
